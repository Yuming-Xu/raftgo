// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test1.proto

package test1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestMsg struct {
	Testpoint            uint64   `protobuf:"varint,1,opt,name=testpoint,proto3" json:"testpoint,omitempty"`
	Testnumber           uint64   `protobuf:"varint,2,opt,name=testnumber,proto3" json:"testnumber,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestMsg) Reset()         { *m = TestMsg{} }
func (m *TestMsg) String() string { return proto.CompactTextString(m) }
func (*TestMsg) ProtoMessage()    {}
func (*TestMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_a038b2eef6c1cfff, []int{0}
}

func (m *TestMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestMsg.Unmarshal(m, b)
}
func (m *TestMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestMsg.Marshal(b, m, deterministic)
}
func (m *TestMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestMsg.Merge(m, src)
}
func (m *TestMsg) XXX_Size() int {
	return xxx_messageInfo_TestMsg.Size(m)
}
func (m *TestMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TestMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TestMsg proto.InternalMessageInfo

func (m *TestMsg) GetTestpoint() uint64 {
	if m != nil {
		return m.Testpoint
	}
	return 0
}

func (m *TestMsg) GetTestnumber() uint64 {
	if m != nil {
		return m.Testnumber
	}
	return 0
}

func init() {
	proto.RegisterType((*TestMsg)(nil), "test1.testMsg")
}

func init() { proto.RegisterFile("test1.proto", fileDescriptor_a038b2eef6c1cfff) }

var fileDescriptor_a038b2eef6c1cfff = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x49, 0x2d, 0x2e,
	0x31, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x0c, 0xb8, 0xd8, 0x41,
	0x0c, 0xdf, 0xe2, 0x74, 0x21, 0x41, 0x2e, 0x4e, 0x10, 0xb3, 0x20, 0x3f, 0x33, 0xaf, 0x44, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x45, 0x48, 0x88, 0x8b, 0x0b, 0x24, 0x94, 0x57, 0x9a, 0x9b, 0x94, 0x5a,
	0x24, 0xc1, 0x04, 0x12, 0x33, 0xb2, 0x82, 0xe8, 0x08, 0x2a, 0x48, 0x16, 0xd2, 0xe7, 0xe2, 0x4e,
	0x4d, 0xce, 0xc8, 0x4f, 0x4b, 0x4d, 0x2c, 0x29, 0x2d, 0x4a, 0x15, 0xe2, 0xd3, 0x83, 0x58, 0x00,
	0x35, 0x50, 0x0a, 0x8d, 0xaf, 0xc4, 0x90, 0xc4, 0x06, 0xb6, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xec, 0xec, 0xf8, 0x66, 0x8a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestRpcClient is the client API for TestRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestRpcClient interface {
	Echofeature(ctx context.Context, in *TestMsg, opts ...grpc.CallOption) (*TestMsg, error)
}

type testRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTestRpcClient(cc grpc.ClientConnInterface) TestRpcClient {
	return &testRpcClient{cc}
}

func (c *testRpcClient) Echofeature(ctx context.Context, in *TestMsg, opts ...grpc.CallOption) (*TestMsg, error) {
	out := new(TestMsg)
	err := c.cc.Invoke(ctx, "/test1.testRpc/echofeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestRpcServer is the server API for TestRpc service.
type TestRpcServer interface {
	Echofeature(context.Context, *TestMsg) (*TestMsg, error)
}

// UnimplementedTestRpcServer can be embedded to have forward compatible implementations.
type UnimplementedTestRpcServer struct {
}

func (*UnimplementedTestRpcServer) Echofeature(ctx context.Context, req *TestMsg) (*TestMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echofeature not implemented")
}

func RegisterTestRpcServer(s *grpc.Server, srv TestRpcServer) {
	s.RegisterService(&_TestRpc_serviceDesc, srv)
}

func _TestRpc_Echofeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestRpcServer).Echofeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test1.testRpc/Echofeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestRpcServer).Echofeature(ctx, req.(*TestMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test1.testRpc",
	HandlerType: (*TestRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "echofeature",
			Handler:    _TestRpc_Echofeature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test1.proto",
}
